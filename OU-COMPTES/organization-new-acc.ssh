#!/bin/bash

# Description : Create account for Mutex organisation
# Version : v1.2
# - create lambda schedule RuleArn
# - modified region to us-east-1 for billing
# - changed billing alert step to 4
# Author : Devoteam


function usage
{
    echo "usage: organization_new_acc.sh [-h] --account_name ACCOUNT_NAME
                                      --account_email ACCOUNT_EMAIL
                                      --cl_profile_name CLI_PROFILE_NAME
                                      [--ou_name ORGANIZATION_UNIT_NAME]
                                      [--region AWS_REGION]"
}

newAccName=""
newAccEmail=""
newProfile=""
roleName="OrganizationAccountAccessRole"
destinationOUname="ou-er"
region="eu-west-3"

while [ "$1" != "" ]; do
    case $1 in
        -n | --account_name )   shift
                                newAccName=$1
                                ;;
        -e | --account_email )  shift
                                newAccEmail=$1
                                ;;
        -p | --cl_profile_name ) shift
                                newProfile=$1
                                ;;
        -o | --ou_name )        shift
                                destinationOUname=$1
                                ;;
        -r | --region )        shift
                                region=$1
                                ;;
        -h | --help )           usage
                                exit
                                ;;
    esac
    shift
done

if [ "$newAccName" = "" ] || [ "$newAccEmail" = "" ] || [ "$newProfile" = "" ]
then
  usage
  exit
fi

# Create account
printf "Create New Account\n"
ReqID=$(aws organizations create-account --email $newAccEmail --account-name "$newAccName" --role-name $roleName \
--query 'CreateAccountStatus.[Id]' \
--output text)

printf "Waiting for New Account ..."
orgStat=$(aws organizations describe-create-account-status --create-account-request-id $ReqID \
--query 'CreateAccountStatus.[State]' \
--output text)

while [ $orgStat != "SUCCEEDED" ]
do
  if [ $orgStat = "FAILED" ]
  then
    printf "\nAccount Failed to Create\n"
    exit 1
  fi
  printf "."
  sleep 10
  orgStat=$(aws organizations describe-create-account-status --create-account-request-id $ReqID \
  --query 'CreateAccountStatus.[State]' \
  --output text)
done

# Get account ID
accID=$(aws organizations describe-create-account-status --create-account-request-id $ReqID \
--query 'CreateAccountStatus.[AccountId]' \
--output text)

accARN="arn:aws:iam::$accID:role/$roleName"

# Assume role for AWS Cli
printf "\nCreate New CLI Profile\n"
aws configure set region $region --profile $newProfile
aws configure set role_arn $accARN --profile $newProfile
aws configure set source_profile default --profile $newProfile

PW="D3v0t3@MLabs"

# Create IAM User
printf "\nCreate IAM User\n"
aws iam create-user  --user-name $newAccName --profile $newProfile
if [ $? -ne 0 ]; then echo ERREUR_CREATING_USER; return; fi
AK=$(aws iam create-access-key --user-name $newAccName --profile $newProfile --output text | cut -f 2,4)
if [ $? -ne 0 ]; then echo ERREUR_CREATING_KEY; return; fi

aws iam create-login-profile --user-name $newAccName --password $PW --profile $newProfile
aws iam create-account-alias --account-alias "${newAccName//./}" --profile $newProfile
echo $newAccName $PW $AK https://${newAccName//./}.signin.aws.amazon.com/console >>/tmp/comptes.txt

# Create IAM policy
policy_arn=$(aws iam create-policy --policy-name DEVO-Policy --policy-document file://IAM_policy.json  \
--profile $newProfile \
--query 'Policy.[Arn]' \
--output text)

# Attach policy
aws iam attach-user-policy --policy-arn $policy_arn --user-name $newAccName --profile $newProfile

# Create lambda role
printf "\nCreate Lambda Role\n"
lambda_arn=$(aws iam create-role --role-name DEVO_Basic_lambda_role --assume-role-policy-document file://lambda_role.json \
--profile $newProfile \
--query 'Role.[Arn]' \
--output text)


# Create lambda for stopping instances
printf "\nCreate Lambda Function\n"
sleep 10
aws lambda create-function \
  --region eu-west-1 \
  --function-name lambda_stop_instance \
  --zip-file fileb://lambda_stop_instance.zip \
  --role $lambda_arn \
  --handler lambda_stop_instance.lambda_handler \
  --runtime python2.7 \
  --profile $newProfile

# Create rule for lambda
events_put_rule_arn=$(aws events put-rule \
  --name stop_instance \
  --schedule-expression 'cron(0 22 * ? * *)' \
  --profile $newProfile \
  --query 'RuleArn' \
  --output text)

# Create add permission for rule
aws lambda add-permission \
  --function-name lambda_stop_instance \
  --statement-id events_put_rule \
  --action 'lambda:InvokeFunction' \
  --principal events.amazonaws.com \
  --source-arn $events_put_rule_arn \
  --profile $newProfile

aws events put-targets --rule stop_instance \
  --targets "Id"="1","Arn"="arn:aws:lambda:eu-west-1:$accID:function:lambda_stop_instance" \
  --profile $newProfile


# Create SNS topic for billing
printf "\nCreate SNS Topic\n"
sns_topic_arn=$(aws sns create-topic \
  --name "BillingAlert" \
  --region us-east-1 \
  --output text \
  --query 'TopicArn' \
  --profile $newProfile
)
echo sns_topic_arn=$sns_topic_arn

# subscribe SNS (2)
printf "\nCreate subscribe SNS\n"
aws sns subscribe \
  --topic-arn "$sns_topic_arn" \
  --protocol email \
  --region us-east-1 \
  --notification-endpoint "ibrahim.sow@mutex-exterieur.fr" \
  --profile $newProfile

# Create email alerts
for (( amount=500; amount<=3000; amount+=500 ))
do
  echo amount=$amount
  aws cloudwatch put-metric-alarm \
    --region us-east-1 \
    --alarm-name "awsbilling-$amount" \
    --alarm-description "AWS billing alarm: \$$amount" \
    --namespace AWS/Billing \
    --metric-name EstimatedCharges \
    --evaluation-periods 1 \
    --period 21600 \
    --statistic Maximum \
    --comparison-operator GreaterThanOrEqualToThreshold \
    --dimensions "Name=Currency,Value=USD" \
    --threshold "$amount"\
    --actions-enabled \
    --alarm-actions "$sns_topic_arn" \
    --profile $newProfile
done

aws cloudwatch describe-alarms --region us-east-1 --profile $newProfile


# Move account to organizations OU
if [ "$destinationOUname" != "" ]
then
  printf "Moving New Account to OU\n"
  rootOU=$(aws organizations list-roots --query 'Roots[0].[Id]' --output text)
  destOU=$(aws organizations list-organizational-units-for-parent --parent-id $rootOU --query 'OrganizationalUnits[?Name==`'$destinationOUname'`].[Id]' --output text)

  aws organizations move-account --account-id $accID --source-parent-id $rootOU --destination-parent-id $destOU > /dev/null 2>&1
  if [ $? -ne 0 ]
  then
    printf "Moving Account Failed\n"
  fi
fi

